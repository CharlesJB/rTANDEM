%\VignetteIndexEntry{The rTANDEM users guide}
%\VignetteKeywords{MassSpectrometry, Proteomics}
%\VignettePackage{rTANDEM}
\documentclass[11pt]{article}
\usepackage{hyperref}
\usepackage{url}
\usepackage{color, pdfcolmk}
\usepackage[authoryear,round]{natbib}
\bibliographystyle{plainnat}


\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}

\author{Arnaud Droit\footnote{arnaud.droit@crchuq.ulaval.ca}, Frederic Fournier\footnote{frederic.fournier@crchuq.ulaval.ca} and Charles Joly Beauparlant\footnote{Charles.Joly-Beauparlant@crchul.ulaval.ca}}

\begin{document}
\title{rTANDEM: An R encapsulation of X!Tandem}
\maketitle



\textnormal {\normalfont}
Introduction to rTANDEM

\tableofcontents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage


\section{Licensing}

This package and the underlying X!Tandem code are distributed under the Artistic license 1.0. You are free to use and redistribute this software. 

\section{Introduction}

X!Tandem is an open source software for protein identification from tandem mass spectrometry experiments, and rTANDEM is an R encapsulation of this software. As of now, rTANDEM provides a very basic encapsulation of X!Tandem: it has a function that takes as an argument the path to an X!Tandem style parameter file and return the path to an X!tandem style output file. The package also presents some functions to transform parameters or results files into R objects and vice versa. We are planning to add functions for visualisation, data manipulation and conversion in a near future.

\section{Manifesto}

Most analytic pipelines for protein identification using tandem mass spectrometry experiments are proprietary. Those pipelines often have the advantage of being user-friendly (to a certain extent), but reliance on proprietary pipelines has many downfalls. Proprietary pipelines hinder collaboration between labs by making it more difficult to analyze data that have been obtained in a different pipeline. It prevents the development of new types of analyzes or of new scientific questions by preventing the researchers from modifying the algorithms or inner settings of the analytic tools. It creates a 'black box' phenomenon where the results given by the analytic tools are to be trusted even though the process by which they have been obtained cannot be fully examined, tested or modified. 

The encapsulation of X!Tandem in R is a fisrt steps towards building a viable analytic pipeline for protein identification in R. The goal is to make R an interesting and powerful framework for ms/ms data analysis just like it is for NGS analysis.

\section{rTANDEM input/output overview}

The input of a standard X!Tandem analysis is composed of several files: three .xml files setting the parameters (usually named input.xml, default-input.xml and taxonomy.xml), one or more database files, and one or more files containing the spectra to be analysed. Detailed information is available on the \href{www.thegpm.org/TANDEM/index.html}{X!Tandem website}. rTANDEM can use the xml files just like X!Tandem, or R objects can be used in lieu of the .xml files. rTANDEM provides functions to create parameters or taxonomy objects from xml files, or to create the xml files from the R parameters or taxonomy objects.
The output of a standard X!Tandem analysis is composed of a standard xml file. Since this output can be quite large, rTANDEM follows X!Tandem behaviour and writes the result of the analysis to an xml file. But the package provides a function to create an R object from the xml files and some functions to examine the results within R. 

\subsection{The input file}

The main input file is used to fix the major parameters of the search, namely
\begin{enumerate}
\item The path to the output file (the file that will be used to store the results).
\item The path to the spectra file (the file that contains the data to be analysed).
\item The taxon used for the search. 
\item The path to a taxonomy file (a file that provides information on the databases to be used).
\item The path to a default-input file (a file that sets parameters that are common to many experiments).
\end{enumerate}

\subsection{The output file}

rTANDEM output is an XML file. The format is based on the XML language BIOML (\url{www.bioml.com}) and a full description of the format is available at \url{http://www.thegpm.org/docs/X_series_output_form.pdf}. The function GetResultsFromXML() can be used to create a R object from the xml file.

\subsection{The spectra file}

The spectra file contains the data generated by the mass spectrometer. The supported formats for the data file are 'DTA', 'PKL' and 'MGF'.

\subsection{The taxonomy file}

The taxonomy file, or object, is used to link together a taxon and one or multiple fasta files. This file is not usually modified for every experiment, rather it provides the link between all taxa and their relative databases. IT should be modified only when databases are updated or replaced.  
The supported formats for database files are 'fasta' and 'fasta.pro'.

\subsection{The default-parameter file}

The default-parameter file is used to set fine-grained parameters. For example it is used to set the mass error tolerated, or to set which types of ions will be used for calculation. This file is not usually modified for every experiment, rather, a default-parameter can be created for every instrument used (the fine-grained parameters are often instrument-specific).  
The default-parameter file also provides link to formatting files (css and xsl) that are useful for consulting the output file in a web browser. 

\section{rTANDEM typical usage}

First of all, load rTANDEM into the session:
<<Loading Rtandem>>=
library(rTANDEM)
@
To use rTANDEM and launch an analysis, we will need a couple of objects and files, including a taxonomy and a parameter set. The taxonomy is used to link taxa to fasta files. The rTANDEM package contains a small fasta file from the yeast proteome, so we can build a taxonomy object using it:
<<Building rTTaxo>>=
taxonomy <- rTTaxo(
  taxon="yeast",
  format="peptide", 
  URL=system.file("extdata/fasta/scd.fasta.pro", package="rTANDEM")
)
taxonomy
@ 
Second we will need to determine the parameters for the analysis. There are usually two different sets of parameters: one set of fine-grained parameters (often related to the mass-spectrometer used to acquire the data); and a set of more basic parameters that specify which data file will be analysed and where should the output be written. A default 'fine-grained' parameter set is included in the package, as well as a small data file, so we can use them to create a complete parameter set. We will start by creating an empty parameter object and we will fill the information in:
<<Building rTParam>>=
param <-  rTParam()
param$'protein, taxon' <- "yeast"
param$'list path, taxonomy information' <- taxonomy
param$'list path, default parameters'   <- 
  system.file("extdata/default_input.xml", package="rTANDEM")
param$'spectrum, path' <- 
  system.file("extdata/test_spectra.mgf", package="rTANDEM")
param$'output, xsl path' <- 
  system.file("extdata/tandem-input-style.xsl", package="rTANDEM")
param$'output, path' <- paste(getwd(), "output.xml", sep="/")
@ 
Now that all the relevant parameters are recorded, we can launch the analysis using the param object:
<<Launching rTANDEM>>=
result.path <- tandem(param)
result.path
@ 
The results are written in xml format to the directory specified. But we can load them in R for further processing.
<<Loading results in R>>=
result.R <- GetResultsFromXML(result.path)
@ 
Having the results in R, we can now explore the identified proteins and the peptides used to identify these proteins. To get the liste of the proteins identified from at least two peptides and with a X!tandem score corresponding to an expect value of 0.05 or better, we simply do:
<<Exploring proteins>>=
proteins <- GetProteins(result.R, log.expect=-1.3, min.peptides=2)
proteins[, c(-4,-5), with=FALSE]  # some columns are removed for better display
@ 
We can use the uid of a protein to select all the peptides used to identify it. Those peptides can also be filtered according to the confidence that we have in their identification. For example, to list all the peptides identified with an expect value < 0.05 that were used to identify the first protein of the list, we can do: 
<<Exploring peptides>>=
peptides <- GetPeptides(protein.uid=proteins[1, uid], result.R, expect=0.05)
peptides
@ 
Note that both the proteins and peptides are in a data.table structure (from the data.table package). Data.tables are a kind of highly optimized data.frame, but you need to use a slightly different syntax to navigate them. 
Sometimes, a peptide sequence will be found in many different proteins. If you are interested in a particular peptide, you might want to check that this is not the case. You can do this using the GetDegeneracy function:
<<Exploring degeneracy>>=
proteins.of.the.peptide <- GetDegeneracy(peptides[1,pep.id], result.R)
proteins.of.the.peptide[,label]  # This peptide belongs to a single protein
@ 
\end{document}
